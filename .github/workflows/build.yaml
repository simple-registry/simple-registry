name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  GHCR_REPO: ghcr.io/${{ github.repository }}
  CONFORMANCE_IMAGE_NAME: conformance

jobs:
  rust-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check formatting
      run: cargo fmt -- --check
    - name: Check clippy
      run: cargo clippy -- -D warnings
  rust-test:
    # We need to a redis backend for the tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4
    - name: Run tests
      run: |
        # Ensure redis service is running
        while ! nc -z localhost 6379; do
          echo "Waiting for redis to start..."
          sleep 1;
        done
        
        rustup component add llvm-tools
        cargo install grcov
              
        CARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='cargo-test-%p-%m.profraw' cargo test
        grcov . --binary-path ./target/debug/deps/ -s . -t html --branch --ignore-not-existing --ignore "target/**" -o target/coverage/html
        grcov . --binary-path ./target/debug/deps/ -s . -t markdown --branch --ignore-not-existing --ignore "../*" --ignore "/*" --ignore "target/**"
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: ./target/coverage/html/*
        if-no-files-found: error
        retention-days: 1

  build-conformance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build conformance tool
        run: |
          git clone https://github.com/opencontainers/distribution-spec.git distribution-spec

          cd distribution-spec/conformance && \
            go test -c && \
            mv conformance.test ../.. && \
            cd ../..

      - name: Download zot benchmark
        run: |
          curl -L -o zb https://github.com/project-zot/zot/releases/download/v2.1.2/zb-linux-amd64
          chmod +x zb

      - name: Build the container
        run: |
          docker build -t ${CONFORMANCE_IMAGE_NAME} -f Dockerfile --build-arg RELEASE_MODE=release .

      - name: Run the conformance test & zot benchmark (filesystem backend)
        run: |
          docker run --rm -d \
            -v ./conformance/config-fs.toml:/config.toml \
            --network host \
            --name conformance-fs-backend \
            ${CONFORMANCE_IMAGE_NAME} \
            server

          for i in {1..10}; do
            if nc -z -w 3 127.0.0.1 8000; then
              break
            fi
            sleep 1
          done

          source ./conformance/conformance-variables
          ./conformance.test

          time ./zb -c 10 -r conformance -n 100 http://localhost:8000 || true
          docker stop conformance-fs-backend

      - name: Run the conformance test & zot benchmark (s3 backend)
        run: |
          mkdir -p ./conformance/minio-data/registry
          docker run --rm -d \
            -v ./conformance/minio-data:/data \
            -e MINIO_ROOT_USER=root \
            -e MINIO_ROOT_PASSWORD=roottoor \
            -e MINIO_VOLUMES=/data \
            --network host \
            --name minio-server \
            quay.io/minio/minio \
            minio server /data

          docker run --rm -d \
            -v ./conformance/config-s3.toml:/config.toml \
            --network host \
            --name conformance-s3-backend \
            ${CONFORMANCE_IMAGE_NAME} \
            server
          
          for i in {1..10}; do
            if nc -z -w 3 127.0.0.1 8000; then
              break
            fi
            sleep 1
          done
          if [ $i -eq 10 ]; then
            echo "simple-registry did not start within 10 seconds"
            exit 1
          fi

          source ./conformance/conformance-variables
          ./conformance.test

          time ./zb -c 10 -r conformance -n 100 http://localhost:8000 || true
          docker stop conformance-s3-backend
          docker stop minio-server

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REPO }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: RELEASE_MODE=release
          outputs: type=image,"name=${{ env.GHCR_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.GHCR_REPO }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.GHCR_REPO }}:${{ steps.meta.outputs.version }}
